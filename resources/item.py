from flask_restful import Resource, reqparse
from flask_jwt import jwt_required
from models.item import ItemModel
import sys

""" notes """
# flask_restful automatically formats your output into json so no need for jsonify
# it's important to return the correct HTTP status codes because they notify the client about the satus of their request


class Item(Resource):
    parser = reqparse.RequestParser()
    parser.add_argument('price', type=float, required=True, help="The price field can't be empty.")
    parser.add_argument('store_id', type=int, required=True, help="Every item needs a store id.")

    # get a specific item
    @jwt_required()
    def get(self, name):
        # use filter function (next returns the first item generated by the filter function
        # it breaks if no items are in the list so add None which becomes a default in such cases)
        item = ItemModel.find_by_name(name)
        if item:
            return item.json(), 200
        return {'message': 'Item not found'}, 404

    def delete(self, name):
        # first ensure that the item exists
        item = ItemModel.find_by_name(name)
        if item:
            try:
                item.delete_from_db()
            except:
                error = sys.exc_info()
                return {'message': "An error occured while deleting the item. Error: {}".format(error)}, 500
            return {'message': "Item '{}' was deleted".format(name)}, 200
        else:
            return {'message': "Item '{}' not found".format(name)}, 404

    # create an item
    def post(self, name):
        # check if item already exists
        if ItemModel.find_by_name(name):
            return {'message': "Item '{}' already exists".format(name)}, 400
        data = Item.parser.parse_args()
        item = ItemModel(name, **data)
        try:
            item.save_to_db() 
        except:
            return {'message': "An error occured inserting the item"}, 500

        return {'message': "Item '{}' has been inserted".format(name)}, 201

    # create an item
    def put(self, name):
        data = Item.parser.parse_args()
        # check if item already exists
        item = ItemModel.find_by_name(name)        
        if item:
            item.price = data['price']
            item.store_id = data['store_id']
        else:
            item = ItemModel(name, **data)

        item.save_to_db()

        return item.json()


class ItemList(Resource):
    # get all the available items
    def get(self):
        try:
            data = ItemModel.get_items()
        except:
            return {"Message": "There was an error fetching data"}, 500

        # return {'items': [item.json() for item in data]}
        return {'items': list(map(lambda x: x.json(), data))}
